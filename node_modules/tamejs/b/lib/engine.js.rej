--- a/lib/engine.js
+++ b/lib/engine.js
@@ -65,6 +65,12 @@
 
     //----------------------------------------
 
+    this.implicitLabelName = function () {
+	return "__tame_k_local";
+    };
+
+    //----------------------------------------
+
     this.addLine = function (l) {
 	this._lines.push ([this._indent, l]);
     };
@@ -88,15 +94,8 @@
 
     //----------------------------------------
 
-    this.initLabels = function (implicit, label) {
-	var s;
-	s = "var " + implicit + " = ";
-	if (label) {
-	    s += label + " = ";
-	}
-	s += " {};";
-	    
-	this.addLine (s);
+    this.initLocalLabel = function (l) {
+	this.addLine ("var " + l + " = {};");
     };
 
     //----------------------------------------
@@ -118,21 +117,31 @@
 	}
 
 	if (k_break) {
-	    this.addLine (lbl + "." + this.kBreak () + " = " + k_break + ";");
+	    this.addLine (this.implicitLabelName() + 
+			  "." + this.kBreak () + 
+			  " = " + k_break + ";");
 	}
 	if (k_cont) {
+	    this.addLine (this.implicitLabelName() + 
+			  "." + this.kContinue () +
+			  " = " + k_cont + ";");
+	}
+	if (k_break && lbl) {
+	    this.addLine (lbl + "." + this.kBreak () + " = " + k_break + ";");
+	}
+	if (k_cont && lbl) {
 	    this.addLine (lbl + "." + this.kContinue () + " = " + k_cont + ";");
 	}
     };
 
     //----------------------------------------
 
-    this.callLabel = function (lbl, eng, typ) {
+    this.callLabel = function (lbl, typ) {
 	var name = "";
 	if (lbl) {
 	    name = this.localLabelName (lbl);
 	} else {
-	    name = eng.activeImplicitControl ();
+	    name = this.implicitLabelName ();
 	}
 	this.addLine (name + "." + typ + "();");
     };
@@ -233,11 +242,9 @@
 function Engine (filename) {
 
     this._fnId = 0;
-    this._kId = 0;
     this._filename = filename;
     this._txt = null;
     this._ast = null;
-    this._implicit_k = [];
 
     // Return a fresh lambda function for internal compilation
     // purposes
@@ -247,30 +254,10 @@
 	return "__tame_fn_" + id;
     };
 
-    this.implicitControlFresh = function () {
-	var id = this._kId;
-	this._kId++;
-	return "__tame_k_implicit_" + id;
-    };
-
     this.compile = function () {
 	return this._ast.compile (this);
     };
 
-    this.pushImplicitControl = function (x) { 
-	var i = this.implicitControlFresh ();
-	this._implicit_k.push (i); 
-	return i;
-    };
-
-    this.activeImplicitControl = function () {
-	return this._implicit_k[this._implicit_k.length - 1];
-    };
-
-    this.popImplicitControl = function () {
-	return this._implicit_k.pop ();
-    };
-
     // Fix this up a bunch!
     this.error = function (node, msg) {
 	console.log (this._filename + ":" + node.startLine () + ": " + msg);
