var tame = require('tamejs').runtime;
var __tame_fn_0 = function (__tame_k) {
    function _timeout (cb, t, res, tmp) {
        var __tame_this = this;
        var __tame_fn_7 = function (__tame_k) {
            var rv = new tame . Rendezvous ( ) ;
            var arr ;
            tmp [ 0 ] = rv . id ( true ) .
            __tame_defers.defer (
                function () {
                    arr = tame.restArr (arguments, 0);
                    }
            )
            ;
            setTimeout ( rv . id ( false ) .
            __tame_defers.defer ()
            , t ) ;
            var __tame_fn_1 = function (__tame_k) {
                var which;
                var __tame_fn_2 = function (__tame_k) {
                    var __tame_defers = new tame.Defers (__tame_k);
                    var __tame_fn_3 = function (__tame_k) {
                        rv . wait (
                        __tame_defers.defer (
                            function () {
                                which = arguments[0];
                                }
                        )
                        ) ;
                        tame.callChain([__tame_k]);
                    };
                    __tame_fn_3(tame.end);
                    __tame_defers._fulfill();
                };
                var __tame_fn_4 = function (__tame_k) {
                    var __tame_fn_5 = function (__tame_k) {
                        res [ 0 ] = which ;
                        tame.callChain([__tame_k]);
                    };
                    if (res) {
                        tame.callChain([__tame_fn_5, __tame_k]);
                    } else {
                        tame.callChain([__tame_k]);
                    }
                };
                var __tame_fn_6 = function (__tame_k) {
                    cb . apply ( null , arr ) ;
                    tame.callChain([__tame_k]);
                };
                tame.callChain([__tame_fn_2, __tame_fn_4, __tame_fn_6, __tame_k]);
            };
            tame.callChain([__tame_fn_1, __tame_k]);
        };
        tame.callChain([__tame_fn_7, __tame_k]);
    }
    ;
    function timeout (cb, t, res) {
        var tmp = [ ] ;
        _timeout ( cb , t , res , tmp ) ;
        return tmp [ 0 ];
    }
    ;
    
    exports . timeout = timeout ;
    tame.callChain([__tame_k]);
};
__tame_fn_0 (tame.end);