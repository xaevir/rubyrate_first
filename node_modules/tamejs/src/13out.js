var tame = require('./tame').tame;
var __tame_fn_0 = function (k) {
    var dns = require ( "dns" ) ;
    function do_one (ev, host) {
        var __tame_fn_5 = function (k) {
            var res = [ ] ;
            var __tame_fn_1 = function (k) {
                var __tame_fn_2 = function (k) {
                    var __ev = new tame.Event (k);
                    var __tame_fn_3 = function (k) {
                        dns .resolve ( host , "A" , __ev.mkevent ( res ) ) ;
                        tame.callChain([k]);
                    };
                    __tame_fn_3(tame.end);
                    __ev.trigger();
                };
                var __tame_fn_4 = function (k) {
                    console .log ( host + " -> " + res [ 1 ] ) ;
                    ev ( ) ;
                    tame.callChain([k]);
                };
                tame.callChain([__tame_fn_2, __tame_fn_4, k]);
            };
            tame.callChain([__tame_fn_1, k]);
        };
        tame.callChain([__tame_fn_5, k]);
    }
    ;
    function do_all (lst) {
        var __tame_fn_6 = function (k) {
            var i = 0;
            var __tame_fn_7 = function (k) {
                var __tame_fn_8 = function (k) {
                    i ++
                    tame.callChain([__tame_fn_7, k]);
                };
                if (i < lst .length) {
                    var __tame_fn_9 = function (k) {
                        var __ev = new tame.Event (k);
                        var __tame_fn_10 = function (k) {
                            do_one ( __ev.mkevent ( ) , lst [ i ] ) ;
                            tame.callChain([k]);
                        };
                        __tame_fn_10(tame.end);
                        __ev.trigger();
                    };
                    tame.callChain([__tame_fn_9, __tame_fn_8, k]);
                } else {
                    tame.callChain([k]);
                }
                tame.__k_global.k_break = k;
                tame.__k_global.k_continue = function() { __tame_fn_8(k); };
            };
            tame.callChain([__tame_fn_7, k]);
        };
        tame.callChain([__tame_fn_6, k]);
    }
    ;
    
    do_all ( process .argv.slice ( 2 ) ) ;
    tame.callChain([k]);
};
__tame_fn_0 (tame.end);