--- a/lib/ast.js
+++ b/lib/ast.js
@@ -467,19 +467,17 @@
 	return ret;
     };
 
-    //-----------------------------------------
-
     that.compile = function (eng) {
 	var outer = eng.fnFresh ();
 	var ret = new eng.Output (outer);
 	ret.addLambda (outer);
 	var lbl = null;
-
 	if (this.getLabel ()) {
 	    lbl = ret.localLabelName (this.getLabel ().getName ());
+	    ret.initLocalLabel (lbl);
 	}
-	var ilbl = eng.pushImplicitControl();
-	ret.initLabels (ilbl, lbl);
+	var ilbl = ret.implicitLabelName ();
+	ret.initLocalLabel (ilbl);
 
 	// If we have a for (var i in foo), we need to jump through
 	// some hoops to convert it to a class for loop iteration
@@ -511,8 +509,6 @@
 	ret.addLine (iter[2]);
 	ret.addCall([inner]);
 	ret.closeLambda ();
-	ret.populateLabels (eng.activeImplicitControl(), inc, 
-			    ret.genericCont ());
 
 	ret.addLine ("if (" + iter[1] + ") {");
 	ret.indent ();
@@ -526,7 +522,7 @@
 	ret.unindent ();
 	ret.addLine ("}");
 
-	eng.popImplicitControl();
+	ret.populateLabels (lbl, inc, ret.genericCont ());
 	ret.closeLambda (); // inner
 	ret.addCall ([ inner ]);
 	ret.closeLambda (); // outer
@@ -700,15 +696,7 @@
 	ret.addLambda (fn);
 	var x = "__tame_switch_x";
 	ret.addLine ("var " + x + " = " + this._expr.inline (eng) + ";");
-
-	if (this.getLabel ()) {
-	    lbl = ret.localLabelName (this.getLabel ().getName ());
-	}
-	var ilbl = ret.pushImplicitControl();
-	ret.initLabels (ilbl, lbl);
-	ret.populateLabels (ret.activeImplicitControl (), null, 
-			    ret.genericCont ());
-
+	ret.populateLabels (null, null, ret.genericCont ());
 	var calls = [];
 	for (i in this._cases) {
 	    var c = this._cases[i].getBody ().compile (eng);
@@ -742,7 +730,6 @@
 	    n_open--;
 	}
 	ret.closeLambda ();
-	ret.popImplicitControl ();
 	return ret;
     };
 
@@ -1004,7 +991,7 @@
 	var fn = eng.fnFresh ();
 	var ret = new eng.Output (fn);
 	ret.addLambda (fn);
-	ret.callLabel (targetLabel, eng, ret.kContinue());
+	ret.callLabel (targetLabel, ret.kContinue());
 	ret.closeLambda ();
 	return ret;
     };
@@ -1043,7 +1030,7 @@
 	var fn = eng.fnFresh ();
 	var ret = new eng.Output (fn);
 	ret.addLambda (fn);
-	ret.callLabel (targetLabel, eng, ret.kBreak ());
+	ret.callLabel (targetLabel, ret.kBreak ());
 	ret.closeLambda ();
 	return ret;
     };
@@ -1073,9 +1060,10 @@
 	var lbl = null;
 	if (this.getLabel ()) {
 	    lbl = ret.localLabelName (this.getLabel ().getName ());
+	    ret.initLocalLabel (lbl);
 	}
-	var ilbl = eng.pushImplicitControl ();
-	ret.initLabels (ilbl, lbl);
+	var ilbl = ret.implicitLabelName ();
+	ret.initLocalLabel (ilbl);
 
 	var inner = eng.fnFresh ();
 	ret.addLambda (inner);
@@ -1097,8 +1085,7 @@
 	ret.addLine ("}");
 
 	ret.closeLambda (); // inner
-	ret.populateLabels (eng.popImplicitControl(), inner, 
-			    ret.genericCont ());
+	ret.populateLabels (lbl, inner, ret.genericCont ());
 	ret.addCall ([inner]);
 	ret.closeLambda (); // outer
 	return ret;
