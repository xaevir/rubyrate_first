var tame = require('tamejs').runtime;
var __tame_fn_0 = function (__tame_k) {
    var n = 30 ;
    var skip = 20 ;
    var slots = { } ;
    var assert = require ( "assert" ) ;
    
    exports [ "break and continue" ] = {
    
    run :
    function  (cb) {
        var self = this;
        var __tame_fn_15 = function (__tame_k) {
            var i = 0 ;
            var __tame_fn_1 = function (__tame_k) {
                var __tame_fn_2 = function (__tame_k) {
                    var __tame_k_local_foo = {};
                    var __tame_fn_3 = function (__tame_k) {
                        if (1) {
                            var __tame_fn_13 = function (__tame_k) {
                                slots [ i ] = 0 ;
                                var __tame_fn_4 = function (__tame_k) {
                                    var __tame_fn_5 = function (__tame_k) {
                                        var __tame_ev = new tame.Event (__tame_k);
                                        var __tame_fn_6 = function (__tame_k) {
                                            setTimeout ( __tame_ev.mkevent ( ) , 1 ) ;
                                            tame.callChain([__tame_k]);
                                        };
                                        __tame_fn_6(tame.end);
                                        __tame_ev.trigger();
                                    };
                                    var __tame_fn_7 = function (__tame_k) {
                                        var __tame_fn_9 = function (__tame_k) {
                                            i ++ ;
                                            var __tame_fn_8 = function (__tame_k) {
                                                __tame_k_local_foo.k_continue();
                                            };
                                            tame.callChain([__tame_fn_8, __tame_k]);
                                        };
                                        if (i == skip) {
                                            tame.callChain([__tame_fn_9, __tame_k]);
                                        } else {
                                            tame.callChain([__tame_k]);
                                        }
                                    };
                                    var __tame_fn_12 = function (__tame_k) {
                                        slots [ i ] = 1 ;
                                        i ++ ;
                                        var __tame_fn_10 = function (__tame_k) {
                                            var __tame_fn_11 = function (__tame_k) {
                                                __tame_k_local_foo.k_break();
                                            };
                                            if (i == n) {
                                                tame.callChain([__tame_fn_11, __tame_k]);
                                            } else {
                                                tame.callChain([__tame_k]);
                                            }
                                        };
                                        tame.callChain([__tame_fn_10, __tame_k]);
                                    };
                                    tame.callChain([__tame_fn_5, __tame_fn_7, __tame_fn_12, __tame_k]);
                                };
                                tame.callChain([__tame_fn_4, __tame_k]);
                            };
                            tame.callChain([__tame_fn_13, __tame_fn_3, __tame_k]);
                        } else {
                            tame.callChain([__tame_k]);
                        }
                    };
                    tame.__k_global.k_break = __tame_k;
                    tame.__k_global.k_continue = function() { __tame_fn_3(__tame_k); };
                    __tame_k_local_foo.k_break = __tame_k;
                    __tame_k_local_foo.k_continue = function() { __tame_fn_3(__tame_k); };
                    tame.callChain([__tame_fn_3, __tame_k]);
                };
                var __tame_fn_14 = function (__tame_k) {
                    cb ( ) ;
                    tame.callChain([__tame_k]);
                };
                tame.callChain([__tame_fn_2, __tame_fn_14, __tame_k]);
            };
            tame.callChain([__tame_fn_1, __tame_k]);
        };
        tame.callChain([__tame_fn_15, __tame_k]);
    }
    ,
    
    check :
    function  () {
        var self = this;
        var i = 0 ;
         for (i = 0 ; i < n ; i ++) {
            if (i != skip) {
                assert .ok ( slots [ i ] , "iter " + i +
                ": all slots but skip=" + skip ) ;
            } else {
                assert .ok ( !slots [ i ] , "iter " + i +
                ":  all slots but skip=" + skip ) ;
            }
        }
        assert .ok ( !slots [ i ] , "stop at slot=" + n ) ;
    }
    } ;
    tame.callChain([__tame_k]);
};
__tame_fn_0 (tame.end);